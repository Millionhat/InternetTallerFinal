package taller2.Palma.demo.delegate;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import taller2.Palma.demo.model.Documenttype;
import taller2.Palma.demo.model.Nexusquestion;
import taller2.Palma.demo.model.Vulnerabilityquestion;

@Component
public class VulnerabilityQuestionDelegate {
	
	@Autowired
	RestTemplate template;
	
	public Iterable<Vulnerabilityquestion> getQuestions(){
		String url="http://localhost:8081/nexusQuestion/RestNexusQuestion/";
		List<Vulnerabilityquestion> questions= new ArrayList();
		Iterable<Vulnerabilityquestion> callmeResponse=null;
		
		ResponseEntity<Vulnerabilityquestion[]> response= template.getForEntity(url,Vulnerabilityquestion[].class);
		Vulnerabilityquestion[] result=response.getBody();
		
		for(int i=0; i<result.length;i++) {
			questions.add(result[i]);
		}
		callmeResponse= questions;
		
		return callmeResponse;
	}
	
	public void createQuestion(Vulnerabilityquestion question) {
		String url="http://localhost:8081/vulnerabilityQuestion/RestVulnerabilityQuestion/";
		
		HttpHeaders header=new HttpHeaders();
		header.setContentType(MediaType.APPLICATION_JSON);
		header.add("user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36");
		HttpEntity<Vulnerabilityquestion> entity= new HttpEntity<>(question,header);
		ResponseEntity<Vulnerabilityquestion> result = template.postForEntity(url, entity, Vulnerabilityquestion.class);
		
	}
	public Vulnerabilityquestion getQuestion(long id) {
		String url="http://localhost:8081//vulnerabilityQuestion/RestVulnerabilityQuestion/"+id;
		
		Vulnerabilityquestion q= new Vulnerabilityquestion();
		
		HttpHeaders header=new HttpHeaders();
		HttpEntity<Vulnerabilityquestion> entity= new HttpEntity<>(q,header);
		ResponseEntity<Vulnerabilityquestion> response=template.getForEntity(url,Vulnerabilityquestion.class);
		
		return response.getBody();
	}
	
	public void delete(long id) {
		String url="http://localhost:8081/vulnerabilityQuestion/RestVulnerabilityQuestion/"+id;
		
		template.delete(url);
	}
	
	public void updateQuestion(long id, Vulnerabilityquestion question) {
		String url="http://localhost:8081/vulnerabilityQuestion/RestVulnerabilityQuestion/"+id;
		
		HttpHeaders header= new HttpHeaders();
		HttpEntity<Vulnerabilityquestion> entity= new HttpEntity<>(question,header);
		
		template.put(url,entity);
	}
	
	public Iterable<Vulnerabilityquestion> getQuestionsPoll(long poll) {
		String url="http://localhost:8081/vulnerabilityQuestion/RestVulnerabilityQuestion/poll/"+poll;
		List<Vulnerabilityquestion> questions= new ArrayList();
		Iterable<Vulnerabilityquestion> callmeResponse=null;
		
		ResponseEntity<Vulnerabilityquestion[]> response= template.getForEntity(url,Vulnerabilityquestion[].class);
		Vulnerabilityquestion[] result=response.getBody();
		
		for(int i=0; i<result.length;i++) {
			questions.add(result[i]);
		}
		callmeResponse= questions;
		
		return callmeResponse;
	}
}
