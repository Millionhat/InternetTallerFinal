package taller2.Palma.demo.controllerImp;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import taller2.Palma.demo.delegate.VulnerabilityPollDelegate;
import taller2.Palma.demo.delegate.VulnerabilityQuestionDelegate;
import taller2.Palma.demo.model.Vulnerabilityquestion;
import taller2.Palma.demo.model.update;


@Controller
public class VulnerabilityQuestionController {
	private VulnerabilityQuestionDelegate vq;
	private VulnerabilityPollDelegate vp;
	
	@Autowired
	public VulnerabilityQuestionController(VulnerabilityQuestionDelegate vulQues) {
		vq=vulQues;
	}
	
	@GetMapping("/vulnerabilityQuestion/")
	public String indexNexQues(Model model) {
		model.addAttribute("vulQuestions",vq.getQuestions());
		return "vulnerabilityQuestion/index";
	}
	
	@GetMapping("/vulnerabilityQuestion/add")
	public String addVulQues(Model model) {
		model.addAttribute("vulQuestion", new Vulnerabilityquestion());
		
		return "vulnerabilityQuestion/addQuestion";
	}
	
	@PostMapping("/vulnerabilityQuestion/add")
	public String saveQuestion(@Validated @ModelAttribute Vulnerabilityquestion vulQuestion,
			BindingResult bindingResult, Model model,@RequestParam(value="action",required=true) String action) {
		if(!action.equals("Cancel")) {
			if(bindingResult.hasErrors()) {
				model.addAttribute("vulQuestion",vulQuestion);
				
				return "vulnerabilityQuestion/addQuestion";
			}
			if(!action.equals("Cancel")) {
				vq.createQuestion(vulQuestion);
			}
		}
		return "redirect:/vulnerabilityQuestion/";
	}
	
	@GetMapping("/vulnerabilityQuestion/edit/{id}")
	public String editVulQuestion(@PathVariable("id") long id, Model model) {
		final Optional<Vulnerabilityquestion> vulQuestion=Optional.of(vq.getQuestion(id));
		if(vulQuestion==null) {
			throw new IllegalArgumentException("INVALID ID "+id);
		}
		model.addAttribute("vulQuestion",vulQuestion.get());
		
		return "vulnerabilityQuestion/editvulQuestion";
	}
	
	@PostMapping("/vulnerabilityQuestion/edit/{id}")
	public String updateDocType(@PathVariable("id") long id, @RequestParam(value="action", required=true) String action,
			@Validated(update.class) @ModelAttribute Vulnerabilityquestion vulQuestion, BindingResult bind, Model model) {
		if(action!=null && !action.equals("Cancel")){
			if(bind.hasErrors()) {
				model.addAttribute("vulQuestion",vulQuestion);
				
				return "/vulnerabilityQuestion/editvulQuestion";
			}
			
			vulQuestion.setVulquesId(id);
			vq.updateQuestion(id, vulQuestion);
			
			model.addAttribute("vulQuestions",vq.getQuestions());
		}
		return "redirect:/vulnerabilityQuestion/";
	}
	
	@GetMapping("/vulnerabilityQuestion/del/{id}")
	public String deleteVulnerabilityQuest(@PathVariable("id") long id, Model model) {
		final Optional<Vulnerabilityquestion> vulQuestion=Optional.of(vq.getQuestion(id));
		if(vulQuestion==null) {
			throw new IllegalArgumentException("INVALID ID "+id);
		}
		
		vq.delete(id);
		model.addAttribute("vulQuestions",vq.getQuestions());
		return "redirect:/vulnerabilityQuestion/";
	}
	
	@GetMapping("/vulnerabilityQuestion/view/{id}")
	public String consultVulQuestion(@PathVariable("id") long id, Model model) {
		final Optional<Vulnerabilityquestion> vulQuestion=Optional.of(vq.getQuestion(id));
		if(vulQuestion==null) {
			throw new IllegalArgumentException("INVALID ID "+id);
		}
		
		model.addAttribute("vulQuestion",vulQuestion.get());
		return "vulnerabilityQuestion/consultVulnerabilityQuestion";
	}
}
