package taller2.Palma.demo.controllerImp;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import taller2.Palma.demo.delegate.VulnerabilityPollDelegate;
import taller2.Palma.demo.delegate.VulnerabilityQuestionDelegate;
import taller2.Palma.demo.model.Vulnerabilitypoll;
import taller2.Palma.demo.model.update;


@Controller
public class VulnerabilityPollControler {
	
	private VulnerabilityQuestionDelegate vq;
	private VulnerabilityPollDelegate vp;

	@Autowired
	public VulnerabilityPollControler(VulnerabilityPollDelegate vulPoll, VulnerabilityQuestionDelegate vulQues) {
		vp=vulPoll;
		vq=vulQues;
	}
	
	@GetMapping("/vulnerabilityPoll/")
	public String indexVulPoll(Model model){
		model.addAttribute("vulPolls",vp.getPolls());
		return "vulnerabilityPoll/index";
	}
	
	@GetMapping("/vulnerabilityPoll/add")
	public String addVulPoll(Model model) {
		model.addAttribute("vulPoll",new Vulnerabilitypoll());
		model.addAttribute("vulQuestions",vq.getQuestions());
		
		return "vulnerabilityPoll/addPoll";
	}
	
	@GetMapping("/vulnerabilityPoll/add")
	public String savePoll(@Validated @ModelAttribute Vulnerabilitypoll vulPoll,
			BindingResult bindingResult, Model model,@RequestParam(value="action",required=true) String action) {
		if(!action.equals("Cancel")) {
			if(bindingResult.hasErrors()) {
				model.addAttribute("vulPoll",vulPoll);
				model.addAttribute("questions",vq.getQuestions());
				
				return "/vulnerabilityPoll/addPoll";
			}
			if(!action.equals("Cancel")) {
				vp.createPoll(vulPoll);
			}
		}
		return "redirect:/vulnerabilityPoll/";
	}
	
	@GetMapping("/vulnerabilityPoll/edit/{id}")
	public String editVulPoll(@PathVariable("id") long id, Model model) {
		final Optional<Vulnerabilitypoll> vulPoll=Optional.of(vp.getPoll(id));
		if(vulPoll==null) {
			throw new IllegalArgumentException("INVALID ID "+id);
		}
		model.addAttribute("vulPoll",vulPoll.get());
		model.addAttribute("questions",vq.getQuestions());
		return "vulnerabilityPoll/editVulPoll";
	}
	
	@PostMapping("/vulnerabilityPoll/edit/{id}")
	public String updateDocType(@PathVariable("id") long id, @RequestParam(value="action", required=true) String action,
			@Validated(update.class) @ModelAttribute Vulnerabilitypoll vulPoll, BindingResult bind, Model model) {
		if(action!=null && !action.equals("Cancel")){
			if(bind.hasErrors()) {
				model.addAttribute("vulPoll",vulPoll);
				model.addAttribute("questions",vq.getQuestions());
				return "/vulnerabilityPoll/editVulPoll";
			}
			vulPoll.setVulpollId(id);
			vp.updatePoll(id, vulPoll);
		}
		return "redirect:/vulnerabilityPoll/";
	}
	
	@GetMapping("/vulnerabilityPoll/del/{id}")
	public String deleteVulverabilituPoll(@PathVariable("id") long id, Model model) {
		final Optional<Vulnerabilitypoll> vulPoll=Optional.of(vp.getPoll(id));
		if(vulPoll==null) {
			throw new IllegalArgumentException("INVALID ID "+id);
		}
		vp.deletePoll(id);
		model.addAttribute("vulPolls",vp.getPolls());
		return "redirect:/vulnerabilityPoll/";
	}
	
	@GetMapping("/vulnerabilityPoll/view/{id}")
	public String consultVulPoll(@PathVariable("id") long id, Model model) {
		final Optional<Vulnerabilitypoll> vulPoll=Optional.of(vp.getPoll(id));
		if(vulPoll==null) {
			throw new IllegalArgumentException("INVALID ID "+id);
		}
		
		model.addAttribute("vulPoll",vulPoll.get());
		model.addAttribute("questions",vq.getQuestions());
		return "vulnerabilityPoll/consultVulnerabilityPoll";
	}
}
